{"version":3,"sources":["Card.js","CardList.js","robots.js","SearchBox.js","App.js","reportWebVitals.js","index.js"],"names":["Random","Math","floor","random","console","log","Card","name","id","className","alt","src","toLowerCase","CardList","robots","map","user","i","SearchBox","searchChange","type","onChange","App","onSearchChange","event","setState","searchfield","target","value","state","filteredRobots","this","filter","robot","includes","length","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"iOACMA,EAAUC,KAAKC,MAAsB,IAAhBD,KAAKE,UAAmB,EACnDC,QAAQC,IAAI,CAAEL,WACd,IAeeM,EAfF,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,KAAe,EAATC,GAElB,OAEI,sBAAKC,UAAU,qDAAf,UAEI,qBAAKC,IAAI,SAASC,IAAG,+BAA0BX,EAASO,EAAKK,cAAxC,mBACrB,8BACI,oBAAIH,UAAU,yBAAd,SAAwCF,UCWzCM,EAnBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEhB,OAEI,8BAGQA,EAAOC,KAAI,SAACC,EAAMC,GACd,OAAQ,cAAC,EAAD,CAEJT,GAAIM,EAAOG,GAAGT,GACdD,KAAMO,EAAOG,GAAGV,MAFXU,SCZhBH,EAAS,CAClB,CACIN,GAAI,EACJD,KAAM,SAEV,CACIC,GAAI,EACJD,KAAM,QAEV,CACIC,GAAI,EACJD,KAAM,OAEV,CACIC,GAAI,EACJD,KAAM,QAEV,CACIC,GAAI,EACJD,KAAM,SAEV,CACIC,GAAI,EACJD,KAAM,SAEV,CACIC,GAAI,EACJD,KAAM,UAEV,CACIC,GAAI,EACJD,KAAM,SAEV,CACIC,GAAI,EACJD,KAAM,SAEV,CACIC,GAAI,GACJD,KAAM,WCzBCW,EAZG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACjB,OACI,qBAAKV,UAAU,MAAf,SACI,uBACIA,UAAU,mCACVW,KAAK,SACLC,SAAUF,OC0CXG,G,wDA1Cb,aAAe,IAAD,8BACZ,gBAcFC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAd1C,EAAKC,MAAQ,CACXf,OAAQA,EACRY,YAAa,IAJH,E,0CAoBd,WAAU,IAAD,OACDI,EAAiBC,KAAKF,MAAMf,OAAOkB,QAAO,SAAAC,GAC9C,OAAOA,EAAM1B,KAAKK,cAAcsB,SAAS,EAAKL,MAAMH,YAAYd,kBAIlE,OADAR,QAAQC,IAAIyB,GACPC,KAAKF,MAAMf,OAAOqB,OAInB,sBAAK1B,UAAU,KAAf,UACE,oBAAIA,UAAU,KAAd,oBACA,cAAC,EAAD,CAAWU,aAAcY,KAAKR,iBAE9B,cAAC,EAAD,CAAUT,OAAQgB,OAPf,6C,GA5BKM,IAAMC,YCKTC,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,QCCdQ,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SAKjDZ,M","file":"static/js/main.0b0d6013.chunk.js","sourcesContent":["import React from 'react';\r\nconst Random = (Math.floor(Math.random() * 1000) + 1)\r\nconsole.log({ Random });\r\nconst Card = ({ name, id }) => {\r\n\r\n    return (\r\n\r\n        <div className='tc bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\r\n            <img alt='robots' src={`https://robohash.org/${Random + name.toLowerCase()}?size=280x226`} />\r\n            <div>\r\n                <h2 className='f3 font-family: avenir'>{name}</h2>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n\r\n    return (\r\n\r\n        <div>\r\n            {\r\n\r\n                robots.map((user, i) => {\r\n                    return (<Card\r\n                        key={i}\r\n                        id={robots[i].id}\r\n                        name={robots[i].name}\r\n                    />)\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","export const robots = [\r\n    {\r\n        id: 1,\r\n        name: 'Sinke'\r\n    },\r\n    {\r\n        id: 2,\r\n        name: 'Tena'\r\n    },\r\n    {\r\n        id: 3,\r\n        name: 'Vec'\r\n    },\r\n    {\r\n        id: 4,\r\n        name: 'Anja'\r\n    },\r\n    {\r\n        id: 5,\r\n        name: 'Hamer'\r\n    },\r\n    {\r\n        id: 6,\r\n        name: 'Ivana'\r\n    },\r\n    {\r\n        id: 7,\r\n        name: 'Renato'\r\n    },\r\n    {\r\n        id: 8,\r\n        name: 'Doris'\r\n    },\r\n    {\r\n        id: 9,\r\n        name: 'Karlo'\r\n    },\r\n    {\r\n        id: 10,\r\n        name: 'Marija'\r\n    }\r\n];\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input\r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='search'\r\n                onChange={searchChange} />\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\nexport default SearchBox;","import React from 'react';\nimport CardList from './CardList';\nimport { robots } from './robots';\nimport SearchBox from './SearchBox';\n//import Scroll from './Scroll';\nimport './App.css'\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      robots: robots,\n      searchfield: ''\n    }\n  }\n\n  //componentDidMount() {\n  //fetch('https://jsonplaceholder.typicode.com/users')\n  //.then(response => response.json())\n  //.then(users => this.setState({ robots: users }));\n\n  //}\n\n  onSearchChange = (event) => {\n    this.setState({ searchfield: event.target.value });\n\n\n  }\n  render() {\n    const filteredRobots = this.state.robots.filter(robot => {\n      return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n\n    })\n    console.log(filteredRobots);\n    if (!this.state.robots.length) {\n      return <h1>Loading</h1>\n    } else {\n      return (\n        <div className='tc'>\n          <h1 className='f1'>Roboti</h1>\n          <SearchBox searchChange={this.onSearchChange} />\n\n          <CardList robots={filteredRobots} />\n\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'tachyons';\nimport reportWebVitals from './reportWebVitals'\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}